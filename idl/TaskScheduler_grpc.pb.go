// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: TaskScheduler.proto

package idl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapleJuiceSchedulerClient is the client API for MapleJuiceScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapleJuiceSchedulerClient interface {
	EnqueueTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type mapleJuiceSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewMapleJuiceSchedulerClient(cc grpc.ClientConnInterface) MapleJuiceSchedulerClient {
	return &mapleJuiceSchedulerClient{cc}
}

func (c *mapleJuiceSchedulerClient) EnqueueTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/TaskScheduler.MapleJuiceScheduler/EnqueueTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapleJuiceSchedulerServer is the server API for MapleJuiceScheduler service.
// All implementations must embed UnimplementedMapleJuiceSchedulerServer
// for forward compatibility
type MapleJuiceSchedulerServer interface {
	EnqueueTask(context.Context, *TaskRequest) (*TaskResponse, error)
	mustEmbedUnimplementedMapleJuiceSchedulerServer()
}

// UnimplementedMapleJuiceSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedMapleJuiceSchedulerServer struct {
}

func (UnimplementedMapleJuiceSchedulerServer) EnqueueTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueTask not implemented")
}
func (UnimplementedMapleJuiceSchedulerServer) mustEmbedUnimplementedMapleJuiceSchedulerServer() {}

// UnsafeMapleJuiceSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapleJuiceSchedulerServer will
// result in compilation errors.
type UnsafeMapleJuiceSchedulerServer interface {
	mustEmbedUnimplementedMapleJuiceSchedulerServer()
}

func RegisterMapleJuiceSchedulerServer(s grpc.ServiceRegistrar, srv MapleJuiceSchedulerServer) {
	s.RegisterService(&MapleJuiceScheduler_ServiceDesc, srv)
}

func _MapleJuiceScheduler_EnqueueTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapleJuiceSchedulerServer).EnqueueTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskScheduler.MapleJuiceScheduler/EnqueueTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapleJuiceSchedulerServer).EnqueueTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapleJuiceScheduler_ServiceDesc is the grpc.ServiceDesc for MapleJuiceScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapleJuiceScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskScheduler.MapleJuiceScheduler",
	HandlerType: (*MapleJuiceSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueueTask",
			Handler:    _MapleJuiceScheduler_EnqueueTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "TaskScheduler.proto",
}
