// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: maple_juice.proto

package idl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeManageServiceClient is the client API for NodeManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeManageServiceClient interface {
	RunMapleTask(ctx context.Context, in *RunMapleTaskRequest, opts ...grpc.CallOption) (*RunMapleTaskResponse, error)
}

type nodeManageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeManageServiceClient(cc grpc.ClientConnInterface) NodeManageServiceClient {
	return &nodeManageServiceClient{cc}
}

func (c *nodeManageServiceClient) RunMapleTask(ctx context.Context, in *RunMapleTaskRequest, opts ...grpc.CallOption) (*RunMapleTaskResponse, error) {
	out := new(RunMapleTaskResponse)
	err := c.cc.Invoke(ctx, "/idl.NodeManageService/RunMapleTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManageServiceServer is the server API for NodeManageService service.
// All implementations must embed UnimplementedNodeManageServiceServer
// for forward compatibility
type NodeManageServiceServer interface {
	RunMapleTask(context.Context, *RunMapleTaskRequest) (*RunMapleTaskResponse, error)
	mustEmbedUnimplementedNodeManageServiceServer()
}

// UnimplementedNodeManageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeManageServiceServer struct {
}

func (UnimplementedNodeManageServiceServer) RunMapleTask(context.Context, *RunMapleTaskRequest) (*RunMapleTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMapleTask not implemented")
}
func (UnimplementedNodeManageServiceServer) mustEmbedUnimplementedNodeManageServiceServer() {}

// UnsafeNodeManageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeManageServiceServer will
// result in compilation errors.
type UnsafeNodeManageServiceServer interface {
	mustEmbedUnimplementedNodeManageServiceServer()
}

func RegisterNodeManageServiceServer(s grpc.ServiceRegistrar, srv NodeManageServiceServer) {
	s.RegisterService(&NodeManageService_ServiceDesc, srv)
}

func _NodeManageService_RunMapleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMapleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManageServiceServer).RunMapleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.NodeManageService/RunMapleTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManageServiceServer).RunMapleTask(ctx, req.(*RunMapleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeManageService_ServiceDesc is the grpc.ServiceDesc for NodeManageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeManageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idl.NodeManageService",
	HandlerType: (*NodeManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunMapleTask",
			Handler:    _NodeManageService_RunMapleTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maple_juice.proto",
}
