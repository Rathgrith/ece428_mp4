// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: datanode.proto

package idl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeServiceClient interface {
	StoreFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_StoreFileClient, error)
	ReplicateFile(ctx context.Context, in *ReplicateFileRequest, opts ...grpc.CallOption) (*ReplicateFileResponse, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (DataNodeService_ReadFileClient, error)
	GetFileReports(ctx context.Context, in *GetFileReportsRequest, opts ...grpc.CallOption) (*GetFileReportsResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_UploadFileClient, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	GetFileSize(ctx context.Context, in *GetFileSizeRequest, opts ...grpc.CallOption) (*GetFileSizeResponse, error)
	MergeFiles(ctx context.Context, in *MergeFilesRequest, opts ...grpc.CallOption) (*MergeFilesResponse, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) StoreFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_StoreFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataNodeService_ServiceDesc.Streams[0], "/sdfs.DataNodeService/StoreFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceStoreFileClient{stream}
	return x, nil
}

type DataNodeService_StoreFileClient interface {
	Send(*StoreFileRequest) error
	CloseAndRecv() (*StoreFileResponse, error)
	grpc.ClientStream
}

type dataNodeServiceStoreFileClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceStoreFileClient) Send(m *StoreFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeServiceStoreFileClient) CloseAndRecv() (*StoreFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) ReplicateFile(ctx context.Context, in *ReplicateFileRequest, opts ...grpc.CallOption) (*ReplicateFileResponse, error) {
	out := new(ReplicateFileResponse)
	err := c.cc.Invoke(ctx, "/sdfs.DataNodeService/ReplicateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (DataNodeService_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataNodeService_ServiceDesc.Streams[1], "/sdfs.DataNodeService/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataNodeService_ReadFileClient interface {
	Recv() (*ReadFileResponse, error)
	grpc.ClientStream
}

type dataNodeServiceReadFileClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceReadFileClient) Recv() (*ReadFileResponse, error) {
	m := new(ReadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) GetFileReports(ctx context.Context, in *GetFileReportsRequest, opts ...grpc.CallOption) (*GetFileReportsResponse, error) {
	out := new(GetFileReportsResponse)
	err := c.cc.Invoke(ctx, "/sdfs.DataNodeService/GetFileReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (DataNodeService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataNodeService_ServiceDesc.Streams[2], "/sdfs.DataNodeService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataNodeServiceUploadFileClient{stream}
	return x, nil
}

type DataNodeService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	Recv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type dataNodeServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *dataNodeServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataNodeServiceUploadFileClient) Recv() (*UploadFileResponse, error) {
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataNodeServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/sdfs.DataNodeService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) GetFileSize(ctx context.Context, in *GetFileSizeRequest, opts ...grpc.CallOption) (*GetFileSizeResponse, error) {
	out := new(GetFileSizeResponse)
	err := c.cc.Invoke(ctx, "/sdfs.DataNodeService/GetFileSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) MergeFiles(ctx context.Context, in *MergeFilesRequest, opts ...grpc.CallOption) (*MergeFilesResponse, error) {
	out := new(MergeFilesResponse)
	err := c.cc.Invoke(ctx, "/sdfs.DataNodeService/MergeFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
// All implementations must embed UnimplementedDataNodeServiceServer
// for forward compatibility
type DataNodeServiceServer interface {
	StoreFile(DataNodeService_StoreFileServer) error
	ReplicateFile(context.Context, *ReplicateFileRequest) (*ReplicateFileResponse, error)
	ReadFile(*ReadFileRequest, DataNodeService_ReadFileServer) error
	GetFileReports(context.Context, *GetFileReportsRequest) (*GetFileReportsResponse, error)
	UploadFile(DataNodeService_UploadFileServer) error
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	GetFileSize(context.Context, *GetFileSizeRequest) (*GetFileSizeResponse, error)
	MergeFiles(context.Context, *MergeFilesRequest) (*MergeFilesResponse, error)
	mustEmbedUnimplementedDataNodeServiceServer()
}

// UnimplementedDataNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServiceServer struct {
}

func (UnimplementedDataNodeServiceServer) StoreFile(DataNodeService_StoreFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}
func (UnimplementedDataNodeServiceServer) ReplicateFile(context.Context, *ReplicateFileRequest) (*ReplicateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateFile not implemented")
}
func (UnimplementedDataNodeServiceServer) ReadFile(*ReadFileRequest, DataNodeService_ReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedDataNodeServiceServer) GetFileReports(context.Context, *GetFileReportsRequest) (*GetFileReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileReports not implemented")
}
func (UnimplementedDataNodeServiceServer) UploadFile(DataNodeService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedDataNodeServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedDataNodeServiceServer) GetFileSize(context.Context, *GetFileSizeRequest) (*GetFileSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSize not implemented")
}
func (UnimplementedDataNodeServiceServer) MergeFiles(context.Context, *MergeFilesRequest) (*MergeFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeFiles not implemented")
}
func (UnimplementedDataNodeServiceServer) mustEmbedUnimplementedDataNodeServiceServer() {}

// UnsafeDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServiceServer will
// result in compilation errors.
type UnsafeDataNodeServiceServer interface {
	mustEmbedUnimplementedDataNodeServiceServer()
}

func RegisterDataNodeServiceServer(s grpc.ServiceRegistrar, srv DataNodeServiceServer) {
	s.RegisterService(&DataNodeService_ServiceDesc, srv)
}

func _DataNodeService_StoreFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServiceServer).StoreFile(&dataNodeServiceStoreFileServer{stream})
}

type DataNodeService_StoreFileServer interface {
	SendAndClose(*StoreFileResponse) error
	Recv() (*StoreFileRequest, error)
	grpc.ServerStream
}

type dataNodeServiceStoreFileServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceStoreFileServer) SendAndClose(m *StoreFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeServiceStoreFileServer) Recv() (*StoreFileRequest, error) {
	m := new(StoreFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeService_ReplicateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).ReplicateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdfs.DataNodeService/ReplicateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).ReplicateFile(ctx, req.(*ReplicateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataNodeServiceServer).ReadFile(m, &dataNodeServiceReadFileServer{stream})
}

type DataNodeService_ReadFileServer interface {
	Send(*ReadFileResponse) error
	grpc.ServerStream
}

type dataNodeServiceReadFileServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceReadFileServer) Send(m *ReadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataNodeService_GetFileReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).GetFileReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdfs.DataNodeService/GetFileReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).GetFileReports(ctx, req.(*GetFileReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataNodeServiceServer).UploadFile(&dataNodeServiceUploadFileServer{stream})
}

type DataNodeService_UploadFileServer interface {
	Send(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type dataNodeServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *dataNodeServiceUploadFileServer) Send(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataNodeServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataNodeService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdfs.DataNodeService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_GetFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).GetFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdfs.DataNodeService/GetFileSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).GetFileSize(ctx, req.(*GetFileSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_MergeFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).MergeFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdfs.DataNodeService/MergeFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).MergeFiles(ctx, req.(*MergeFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNodeService_ServiceDesc is the grpc.ServiceDesc for DataNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdfs.DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicateFile",
			Handler:    _DataNodeService_ReplicateFile_Handler,
		},
		{
			MethodName: "GetFileReports",
			Handler:    _DataNodeService_GetFileReports_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _DataNodeService_DeleteFile_Handler,
		},
		{
			MethodName: "GetFileSize",
			Handler:    _DataNodeService_GetFileSize_Handler,
		},
		{
			MethodName: "MergeFiles",
			Handler:    _DataNodeService_MergeFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreFile",
			Handler:       _DataNodeService_StoreFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFile",
			Handler:       _DataNodeService_ReadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _DataNodeService_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "datanode.proto",
}
